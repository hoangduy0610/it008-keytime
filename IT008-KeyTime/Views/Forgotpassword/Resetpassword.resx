<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>